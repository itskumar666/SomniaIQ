import { deployContract } from "thirdweb/deploys";
import { client, somniaTestnet } from "../src/lib/thirdweb";
import { privateKeyToAccount } from "thirdweb/wallets";

// Contract deployment script for Somnia network
async function deployContracts() {
  console.log("🚀 Deploying DeFi Decision Maker contracts to Somnia...");

  // You'll need to set your private key in environment variables
  const deployerPrivateKey = process.env.DEPLOYER_PRIVATE_KEY;
  if (!deployerPrivateKey) {
    throw new Error("DEPLOYER_PRIVATE_KEY not found in environment variables");
  }

  const account = privateKeyToAccount({
    client,
    privateKey: deployerPrivateKey,
  });

  try {
    // Deploy AI Oracle contract first
    console.log("📡 Deploying AI Oracle contract...");
    const aiOracleTransaction = await prepareContractDeploy({
      client,
      chain: somniaTestnet,
      account,
      bytecode: "0x608060405234801561001057600080fd5b50604051610c38380380610c388339818101604052810190610032919061007a565b61004b61003f61005460201b60201c565b61005c60201b60201c565b80600081905550505b6100a7565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061014d82610122565b9050919050565b61015d81610142565b811461016857600080fd5b50565b60008151905061017a81610154565b92915050565b60006020828403121561019657610195610120565b5b60006101a48482850161016b565b91505092915050565b610b82806101bb6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063715018a61461003b5780638da5cb5b14610045575b600080fd5b610043610063565b005b61004d610077565b60405161005a9190610a28565b60405180910390f35b61006b6100a0565b610076600061011e565b5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6100a86101e2565b73ffffffffffffffffffffffffffffffffffffffff166100c6610077565b73ffffffffffffffffffffffffffffffffffffffff161461011c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011390610a8f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061021582610084565b9050919050565b6102258161020a565b82525050565b6000602082019050610240600083018461021c565b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061027c602083610ac8565b915061028782610246565b602082019050919050565b600060208201905081810360008301526102ab8161026f565b9050919050565b600082825260208201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061030957607f821691505b60208210810361031c5761031b6102c2565b5b5091905056fea26469706673582212207f1d0c4b63a7c746f190a8e4e8d3b2b5e5f1b8c7a01879e8e8d8e1b5c7a0187964736f6c63430008130033", // This would be the actual compiled bytecode
      constructorParams: [account.address], // AI Oracle doesn't need constructor params for this deployment
    });

    console.log("⏳ Waiting for AI Oracle deployment...");
    const aiOracleAddress = await deployContract(aiOracleTransaction);
    console.log("✅ AI Oracle deployed at:", aiOracleAddress);

    // Deploy main DeFi Decision Maker contract
    console.log("💼 Deploying DeFi Decision Maker contract...");
    const portfolioManagerTransaction = await prepareContractDeploy({
      client,
      chain: somniaTestnet,
      account,
      bytecode: "0x608060405234801561001057600080fd5b50604051610c38380380610c388339818101604052810190610032919061007a565b61004b61003f61005460201b60201c565b61005c60201b60201c565b80600181905550505b6100a7565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061014d82610122565b9050919050565b61015d81610142565b811461016857600080fd5b50565b60008151905061017a81610154565b92915050565b60006020828403121561019657610195610120565b5b60006101a48482850161016b565b91505092915050565b610b82806101bb6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063715018a61461003b5780638da5cb5b14610045575b600080fd5b610043610063565b005b61004d610077565b60405161005a9190610a28565b60405180910390f35b61006b6100a0565b610076600061011e565b5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6100a86101e2565b73ffffffffffffffffffffffffffffffffffffffff166100c6610077565b73ffffffffffffffffffffffffffffffffffffffff161461011c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011390610a8f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b000073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061021582610084565b9050919050565b61022581610020a565b82525050565b6000602082019050610240600083018461021c565b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061027c602083610ac8565b915061028782610246565b602082019050919050565b600060208201905081810360008301526102ab8161026f565b9050919050565b600082825260208201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061030957607f821691505b60208210810361031c5761031b6102c2565b5b5091905056fea26469706673582212207f1d0c4b63a7c746f190a8e4e8d3b2b5e5f1b8c7a01879e8e8d8e1b5c7a0187964736f6c63430008130033", // This would be the actual compiled bytecode
      constructorParams: [aiOracleAddress], // Pass AI Oracle address to constructor
    });

    console.log("⏳ Waiting for DeFi Decision Maker deployment...");
    const portfolioManagerAddress = await deployContract(portfolioManagerTransaction);
    console.log("✅ DeFi Decision Maker deployed at:", portfolioManagerAddress);

    // Save contract addresses to a file for frontend use
    const contractAddresses = {
      aiOracle: aiOracleAddress,
      portfolioManager: portfolioManagerAddress,
      network: "somnia-testnet",
      deployedAt: new Date().toISOString(),
    };

    console.log("📋 Contract Deployment Summary:");
    console.log("================================");
    console.log(`AI Oracle: ${aiOracleAddress}`);
    console.log(`Portfolio Manager: ${portfolioManagerAddress}`);
    console.log(`Network: Somnia Shannon Testnet`);
    console.log("================================");

    return contractAddresses;

  } catch (error) {
    console.error("❌ Deployment failed:", error);
    throw error;
  }
}

// Run deployment if this script is called directly
if (require.main === module) {
  deployContracts()
    .then((addresses) => {
      console.log("🎉 All contracts deployed successfully!");
      console.log("Contract addresses:", addresses);
    })
    .catch((error) => {
      console.error("💥 Deployment failed:", error);
      process.exit(1);
    });
}

export { deployContracts };